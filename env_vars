#!/usr/bin/env bash

# This variable was used to check if the job was using user environment, if yes, user need to provide the login creds.
export USER_ENV=${USER_ENV:-true}

# This variable was used to determin the Snapshot version which you want to apply in your environment.
export TEST_SNAPSHOT=${TEST_SNAPSHOT:-}
if [[ -z $TEST_SNAPSHOT ]]; then
    echo "Please provide the TEST_SNAPSHOT to run the automation test"
    exit 1
fi

USER_ENV=$(echo -n $USER_ENV | tr 'A-Z' 'a-z')

# This variable was used to determine the ACM VERSION for testing.
if [[ $USER_ENV == "false" ]]; then
    export ACM_VERSION=${ACM_VERSION:-2.3}

    if [[ -z $ACM_VERSION ]]; then
        echo "Please set ACM_VERSION environment variable before running the scripts"
        exit 1
    fi
    if [[ $(jq -r ".acm_versions[].version == $ACM_VERSION" config/environment.json | grep true | wc -l | sed 's/^ *//') == 0 ]]; then
        echo "can not find the supported ACM_VERSION:$ACM_VERSION, please try to correct the version that the automation supported"
        exit 1
    fi

    # This variable will be ready from jenkins configuration, and the value will be like "aws,azure,gcp,roks", so need to split the ',' here as well
    export ACM_HUB_TYPE=${ACM_HUB_TYPE:-AWS}
else
    # If the variable USER_ENV was set to true, need user input the user variable HUB_USERNAME, HUB_PASSWORD, OCP_URL.
    export OCP_URL=${OCP_URL:-}
    if [[ -z $OCP_URL ]]; then
        echo "Please make sure you have user variable OCP_URL exported"
        exit 1
    fi

    export OCP_TOKEN=${OCP_TOKEN:-}
    if [[ -z $OCP_TOKEN ]]; then
        export HUB_USERNAME=${HUB_USERNAME:-kubeadmin}
        export HUB_PASSWORD=${HUB_PASSWORD:-}
        if [[ -z $HUB_USERNAME || -z $HUB_PASSWORD ]]; then
            echo "Please make sure you have user variable HUB_USERNAME, HUB_PASSWORD exported if you did not use the token for authentication."
            exit 1
        fi
    fi
fi

# This variable was used to determine the ACM Spoke cluster for testing.
export SPOKE_API_URL=${SPOKE_API_URL:-}
export SPOKE_TOKEN=${SPOKE_TOKEN:-}
export SPOKE_USERNAME=${SPOKE_USERNAME:-}
export SPOKE_PASSWORD=${SPOKE_PASSWORD:-}

# This variable was used to determine which test you want to run and the value will like "kui,search,observability", use "," to split each cases group
export ACM_TEST_GROUP=${ACM_TEST_GROUP:-}
if [[ -z $ACM_TEST_GROUP ]]; then
    echo "Please set ACM_TEST_GROUP environment variable before running the scripts"
    exit 1
fi

# This variable will be ready from jenkins configuration, and the value will be like "docker" or "podman"
export DOCKER=${DOCKER:-docker}

# This variable will be ready from jenkins configuration which used to pull docker images from quay.io
export QUAY_USERNAME=${QUAY_USERNAME:-}
export QUAY_PASSWORD=${QUAY_PASSWORD:-}
if [[ -z $QUAY_USERNAME || -z $QUAY_PASSWORD ]]; then
    echo "Please set QUAY_USERNAME and QUAY_PASSWORD environment variable before running the scripts"
    exit 1
fi

# This variable was used for different acm repo, the supported value should be 'acm-d' and 'open-cluster-management'.
export QUAY_ORG=${QUAY_ORG:-"open-cluster-management"}
sudo $DOCKER login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io/$QUAY_ORG
if [[ $? -ne 0 ]]; then
    echo "can not login quay.io/$QUAY_ORG with the username and password you provided"
    exit 1
fi

# These variables were used to push the report to github repo
export SKIP_PUSH_REPORT=${SKIP_PUSH_REPORT:-false}
if [[ $SKIP_PUSH_REPORT == "false" ]]; then
    export GITHUB_TOKEN=${GITHUB_TOKEN:-}
fi

# This variable was used in grc ui testing, the default value is acmqe and user can update this value by setting the variable environment.
export RBAC_PASS=${RBAC_PASS:-"acmqe"}

# This varialbe was used to generate the timestamp to save the test report. 
export TIME_STAMP=$(date "+%Y%m%d%H%M")

# This variable was used to generate the report, the default value is 10.
export TEST_FILES_COUNT=${TEST_FILES_COUNT:-10}